{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useProject.js\nimport { useState, useEffect } from 'react';\nexport const useProject = projectId => {\n  _s();\n  const [project, setProject] = useState(null);\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProject = async () => {\n      if (!projectId) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n\n        // In a real implementation, this would be an API endpoint\n        // For development purposes, we're simulating this data\n        const mockProjectFetch = async () => {\n          // Simulate network delay\n          await new Promise(resolve => setTimeout(resolve, 500));\n\n          // Mock project data based on projectId\n          let projectData = null;\n          let projectImages = ['main.jpg'];\n          if (projectId === 'GameProject1') {\n            projectData = {\n              id: 'GameProject1',\n              info: {\n                type: 'Game',\n                description: 'This is a sample game project. In a real implementation, this description would be read from the info.json file in the project folder. The description can be quite long and detailed, explaining the project, its goals, challenges faced, and solutions implemented. Users can scroll through this content to read more about the project.',\n                technologies: ['Unity', 'C#', 'Blender', '3D Modeling', 'Game Design'],\n                links: [{\n                  title: 'GitHub Repository',\n                  url: 'https://github.com'\n                }, {\n                  title: 'Play Game',\n                  url: 'https://example.com/play'\n                }, {\n                  title: 'Download',\n                  url: 'https://example.com/download'\n                }]\n              }\n            };\n            // Simulate multiple images\n            projectImages = ['main.jpg', 'screenshot1.jpg', 'screenshot2.jpg'];\n          } else if (projectId === 'WebsiteProject1') {\n            projectData = {\n              id: 'WebsiteProject1',\n              info: {\n                type: 'Website',\n                description: 'This is a sample website project. This detailed description would normally be read from the info.json file. It explains the purpose of the website, the technologies used, and any interesting features or design decisions that went into creating it. The description demonstrates how the project details modal can handle longer text content with scrolling.',\n                technologies: ['React', 'JavaScript', 'CSS', 'Firebase', 'Responsive Design'],\n                links: [{\n                  title: 'GitHub Repository',\n                  url: 'https://github.com'\n                }, {\n                  title: 'Live Website',\n                  url: 'https://example.com'\n                }]\n              }\n            };\n            projectImages = ['main.jpg', 'mobile.jpg', 'desktop.jpg'];\n          }\n          return {\n            projectData,\n            projectImages\n          };\n        };\n        const {\n          projectData,\n          projectImages\n        } = await mockProjectFetch();\n        if (!projectData) {\n          throw new Error('Project not found');\n        }\n        setProject(projectData);\n        setImages(projectImages);\n      } catch (err) {\n        console.error('Error fetching project:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProject();\n  }, [projectId]);\n  return {\n    project,\n    images,\n    loading,\n    error\n  };\n};\n_s(useProject, \"lxGVgLJu5gkce6FwQX0m9zYCMjE=\");","map":{"version":3,"names":["useState","useEffect","useProject","projectId","_s","project","setProject","images","setImages","loading","setLoading","error","setError","fetchProject","mockProjectFetch","Promise","resolve","setTimeout","projectData","projectImages","id","info","type","description","technologies","links","title","url","Error","err","console","message"],"sources":["C:/Users/David/Desktop/portfolio/src/hooks/useProject.js"],"sourcesContent":["// src/hooks/useProject.js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useProject = (projectId) => {\r\n  const [project, setProject] = useState(null);\r\n  const [images, setImages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProject = async () => {\r\n      if (!projectId) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        setLoading(true);\r\n        \r\n        // In a real implementation, this would be an API endpoint\r\n        // For development purposes, we're simulating this data\r\n        const mockProjectFetch = async () => {\r\n          // Simulate network delay\r\n          await new Promise(resolve => setTimeout(resolve, 500));\r\n          \r\n          // Mock project data based on projectId\r\n          let projectData = null;\r\n          let projectImages = ['main.jpg'];\r\n          \r\n          if (projectId === 'GameProject1') {\r\n            projectData = {\r\n              id: 'GameProject1',\r\n              info: {\r\n                type: 'Game',\r\n                description: 'This is a sample game project. In a real implementation, this description would be read from the info.json file in the project folder. The description can be quite long and detailed, explaining the project, its goals, challenges faced, and solutions implemented. Users can scroll through this content to read more about the project.',\r\n                technologies: ['Unity', 'C#', 'Blender', '3D Modeling', 'Game Design'],\r\n                links: [\r\n                  { title: 'GitHub Repository', url: 'https://github.com' },\r\n                  { title: 'Play Game', url: 'https://example.com/play' },\r\n                  { title: 'Download', url: 'https://example.com/download' }\r\n                ]\r\n              }\r\n            };\r\n            // Simulate multiple images\r\n            projectImages = ['main.jpg', 'screenshot1.jpg', 'screenshot2.jpg'];\r\n          } else if (projectId === 'WebsiteProject1') {\r\n            projectData = {\r\n              id: 'WebsiteProject1',\r\n              info: {\r\n                type: 'Website',\r\n                description: 'This is a sample website project. This detailed description would normally be read from the info.json file. It explains the purpose of the website, the technologies used, and any interesting features or design decisions that went into creating it. The description demonstrates how the project details modal can handle longer text content with scrolling.',\r\n                technologies: ['React', 'JavaScript', 'CSS', 'Firebase', 'Responsive Design'],\r\n                links: [\r\n                  { title: 'GitHub Repository', url: 'https://github.com' },\r\n                  { title: 'Live Website', url: 'https://example.com' }\r\n                ]\r\n              }\r\n            };\r\n            projectImages = ['main.jpg', 'mobile.jpg', 'desktop.jpg'];\r\n          }\r\n          \r\n          return { projectData, projectImages };\r\n        };\r\n        \r\n        const { projectData, projectImages } = await mockProjectFetch();\r\n        \r\n        if (!projectData) {\r\n          throw new Error('Project not found');\r\n        }\r\n        \r\n        setProject(projectData);\r\n        setImages(projectImages);\r\n        \r\n      } catch (err) {\r\n        console.error('Error fetching project:', err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProject();\r\n  }, [projectId]);\r\n\r\n  return { project, images, loading, error };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}