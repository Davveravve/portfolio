{"ast":null,"code":"// src/hooks/useProject.js\nimport{useState,useEffect}from'react';export const useProject=projectId=>{const[project,setProject]=useState(null);const[images,setImages]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const fetchProject=async()=>{if(!projectId){setLoading(false);return;}try{setLoading(true);// Hämta projektdata från sessionStorage eller config\nconst storedProjects=sessionStorage.getItem('allProjects');let allProjects=[];if(storedProjects){allProjects=JSON.parse(storedProjects);}else{// Försök ladda från config om sessionStorage är tom\nconst response=await fetch('/projects.json');if(response.ok){allProjects=await response.json();sessionStorage.setItem('allProjects',JSON.stringify(allProjects));}}// Hitta specifikt projekt\nconst foundProject=allProjects.find(p=>p.id===projectId);if(!foundProject){throw new Error(`Project \"${projectId}\" not found`);}setProject(foundProject);// Använd bildlistan från config om den finns\nif(foundProject.images&&Array.isArray(foundProject.images)){setImages(foundProject.images);}else{// Fallback till bara main.jpg\nsetImages(['main.jpg']);}}catch(err){console.error('Error fetching project:',err);setError(err.message);}finally{setLoading(false);}};fetchProject();},[projectId]);return{project,images,loading,error};};","map":{"version":3,"names":["useState","useEffect","useProject","projectId","project","setProject","images","setImages","loading","setLoading","error","setError","fetchProject","storedProjects","sessionStorage","getItem","allProjects","JSON","parse","response","fetch","ok","json","setItem","stringify","foundProject","find","p","id","Error","Array","isArray","err","console","message"],"sources":["C:/Users/David/Desktop/portfolio/src/hooks/useProject.js"],"sourcesContent":["// src/hooks/useProject.js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useProject = (projectId) => {\r\n  const [project, setProject] = useState(null);\r\n  const [images, setImages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProject = async () => {\r\n      if (!projectId) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Hämta projektdata från sessionStorage eller config\r\n        const storedProjects = sessionStorage.getItem('allProjects');\r\n        let allProjects = [];\r\n        \r\n        if (storedProjects) {\r\n          allProjects = JSON.parse(storedProjects);\r\n        } else {\r\n          // Försök ladda från config om sessionStorage är tom\r\n          const response = await fetch('/projects.json');\r\n          if (response.ok) {\r\n            allProjects = await response.json();\r\n            sessionStorage.setItem('allProjects', JSON.stringify(allProjects));\r\n          }\r\n        }\r\n        \r\n        // Hitta specifikt projekt\r\n        const foundProject = allProjects.find(p => p.id === projectId);\r\n        \r\n        if (!foundProject) {\r\n          throw new Error(`Project \"${projectId}\" not found`);\r\n        }\r\n        \r\n        setProject(foundProject);\r\n        \r\n        // Använd bildlistan från config om den finns\r\n        if (foundProject.images && Array.isArray(foundProject.images)) {\r\n          setImages(foundProject.images);\r\n        } else {\r\n          // Fallback till bara main.jpg\r\n          setImages(['main.jpg']);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching project:', err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProject();\r\n  }, [projectId]);\r\n\r\n  return { project, images, loading, error };\r\n};"],"mappings":"AAAA;AACA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,MAAO,MAAM,CAAAC,UAAU,CAAIC,SAAS,EAAK,CACvC,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGL,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACM,MAAM,CAAEC,SAAS,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACQ,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CAExCC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAW,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CAACT,SAAS,CAAE,CACdM,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CAEA,GAAI,CACFA,UAAU,CAAC,IAAI,CAAC,CAEhB;AACA,KAAM,CAAAI,cAAc,CAAGC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,CAC5D,GAAI,CAAAC,WAAW,CAAG,EAAE,CAEpB,GAAIH,cAAc,CAAE,CAClBG,WAAW,CAAGC,IAAI,CAACC,KAAK,CAACL,cAAc,CAAC,CAC1C,CAAC,IAAM,CACL;AACA,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,gBAAgB,CAAC,CAC9C,GAAID,QAAQ,CAACE,EAAE,CAAE,CACfL,WAAW,CAAG,KAAM,CAAAG,QAAQ,CAACG,IAAI,CAAC,CAAC,CACnCR,cAAc,CAACS,OAAO,CAAC,aAAa,CAAEN,IAAI,CAACO,SAAS,CAACR,WAAW,CAAC,CAAC,CACpE,CACF,CAEA;AACA,KAAM,CAAAS,YAAY,CAAGT,WAAW,CAACU,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAKzB,SAAS,CAAC,CAE9D,GAAI,CAACsB,YAAY,CAAE,CACjB,KAAM,IAAI,CAAAI,KAAK,CAAC,YAAY1B,SAAS,aAAa,CAAC,CACrD,CAEAE,UAAU,CAACoB,YAAY,CAAC,CAExB;AACA,GAAIA,YAAY,CAACnB,MAAM,EAAIwB,KAAK,CAACC,OAAO,CAACN,YAAY,CAACnB,MAAM,CAAC,CAAE,CAC7DC,SAAS,CAACkB,YAAY,CAACnB,MAAM,CAAC,CAChC,CAAC,IAAM,CACL;AACAC,SAAS,CAAC,CAAC,UAAU,CAAC,CAAC,CACzB,CACF,CAAE,MAAOyB,GAAG,CAAE,CACZC,OAAO,CAACvB,KAAK,CAAC,yBAAyB,CAAEsB,GAAG,CAAC,CAC7CrB,QAAQ,CAACqB,GAAG,CAACE,OAAO,CAAC,CACvB,CAAC,OAAS,CACRzB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDG,YAAY,CAAC,CAAC,CAChB,CAAC,CAAE,CAACT,SAAS,CAAC,CAAC,CAEf,MAAO,CAAEC,OAAO,CAAEE,MAAM,CAAEE,OAAO,CAAEE,KAAM,CAAC,CAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}