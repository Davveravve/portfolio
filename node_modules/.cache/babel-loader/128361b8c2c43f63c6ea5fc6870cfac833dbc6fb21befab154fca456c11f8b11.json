{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useProjects.js\nimport { useState, useEffect } from 'react';\nexport const useProjects = type => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProjects = async () => {\n      if (!type) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n\n        // Simulera ett API-anrop för att hämta projekt av en specifik typ\n        await new Promise(resolve => setTimeout(resolve, 300));\n\n        // Hämta lagrade projekt från sessionStorage (som satts i useProjectTypes)\n        const storedProjects = sessionStorage.getItem('allProjects');\n        let allProjects = [];\n        if (storedProjects) {\n          // Om det finns projekt lagrade, använd dem\n          allProjects = JSON.parse(storedProjects);\n        } else {\n          // Annars, simulera hämtning av alla projekt (backup)\n          allProjects = [{\n            id: 'GameProject1',\n            info: {\n              type: 'Game',\n              description: 'A sample game project',\n              technologies: ['Unity', 'C#', 'Blender'],\n              links: [{\n                title: 'GitHub',\n                url: 'https://github.com'\n              }, {\n                title: 'Play Game',\n                url: 'https://example.com'\n              }]\n            }\n          }, {\n            id: 'WebsiteProject1',\n            info: {\n              type: 'Website',\n              description: 'A sample website project',\n              technologies: ['React', 'CSS', 'Firebase'],\n              links: [{\n                title: 'GitHub',\n                url: 'https://github.com'\n              }, {\n                title: 'Live Site',\n                url: 'https://example.com'\n              }]\n            }\n          }, {\n            id: 'Axento',\n            info: {\n              type: 'Axento',\n              description: 'Ett litet sidoprojekt jag hade för att underlätta hantering av material i min servicebil.',\n              technologies: ['Javascript', 'React', 'Supabase', 'Vercel'],\n              links: [{\n                title: 'GitHub Repository',\n                url: 'https://github.com/yourusername/projectname'\n              }, {\n                title: 'Live Demo',\n                url: 'https://www.axento.se'\n              }]\n            }\n          }];\n        }\n\n        // Filtrera projekt baserat på typ (icke skiftlägeskänslig)\n        const filteredProjects = allProjects.filter(project => {\n          const projectType = project.info.type.toLowerCase();\n          const searchType = type.toLowerCase();\n\n          // Matcha både singular och plural versioner\n          // t.ex. om typ är \"websites\" matchar det ett projekt med typ \"website\"\n          return projectType === searchType || projectType + 's' === searchType || projectType === searchType + 's';\n        });\n        console.log(`Hittade ${filteredProjects.length} projekt av typen \"${type}\"`);\n        setProjects(filteredProjects);\n      } catch (err) {\n        console.error('Error fetching projects:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProjects();\n  }, [type]);\n  return {\n    projects,\n    loading,\n    error\n  };\n};\n_s(useProjects, \"D01YWZOqXtPgB8Jf7trLNzFYnAg=\");","map":{"version":3,"names":["useState","useEffect","useProjects","type","_s","projects","setProjects","loading","setLoading","error","setError","fetchProjects","Promise","resolve","setTimeout","storedProjects","sessionStorage","getItem","allProjects","JSON","parse","id","info","description","technologies","links","title","url","filteredProjects","filter","project","projectType","toLowerCase","searchType","console","log","length","err","message"],"sources":["C:/Users/David/Desktop/portfolio/src/hooks/useProjects.js"],"sourcesContent":["// src/hooks/useProjects.js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useProjects = (type) => {\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProjects = async () => {\r\n      if (!type) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Simulera ett API-anrop för att hämta projekt av en specifik typ\r\n        await new Promise(resolve => setTimeout(resolve, 300));\r\n        \r\n        // Hämta lagrade projekt från sessionStorage (som satts i useProjectTypes)\r\n        const storedProjects = sessionStorage.getItem('allProjects');\r\n        let allProjects = [];\r\n        \r\n        if (storedProjects) {\r\n          // Om det finns projekt lagrade, använd dem\r\n          allProjects = JSON.parse(storedProjects);\r\n        } else {\r\n          // Annars, simulera hämtning av alla projekt (backup)\r\n          allProjects = [\r\n            {\r\n              id: 'GameProject1',\r\n              info: { \r\n                type: 'Game', \r\n                description: 'A sample game project',\r\n                technologies: ['Unity', 'C#', 'Blender'],\r\n                links: [\r\n                  { title: 'GitHub', url: 'https://github.com' },\r\n                  { title: 'Play Game', url: 'https://example.com' }\r\n                ]\r\n              }\r\n            },\r\n            {\r\n              id: 'WebsiteProject1',\r\n              info: { \r\n                type: 'Website', \r\n                description: 'A sample website project',\r\n                technologies: ['React', 'CSS', 'Firebase'],\r\n                links: [\r\n                  { title: 'GitHub', url: 'https://github.com' },\r\n                  { title: 'Live Site', url: 'https://example.com' }\r\n                ]\r\n              }\r\n            },\r\n            {\r\n              id: 'Axento',\r\n              info: { \r\n                type: 'Axento', \r\n                description: 'Ett litet sidoprojekt jag hade för att underlätta hantering av material i min servicebil.',\r\n                technologies: ['Javascript', 'React', 'Supabase', 'Vercel'],\r\n                links: [\r\n                  { title: 'GitHub Repository', url: 'https://github.com/yourusername/projectname' },\r\n                  { title: 'Live Demo', url: 'https://www.axento.se' }\r\n                ]\r\n              }\r\n            }\r\n          ];\r\n        }\r\n        \r\n        // Filtrera projekt baserat på typ (icke skiftlägeskänslig)\r\n        const filteredProjects = allProjects.filter(project => {\r\n          const projectType = project.info.type.toLowerCase();\r\n          const searchType = type.toLowerCase();\r\n          \r\n          // Matcha både singular och plural versioner\r\n          // t.ex. om typ är \"websites\" matchar det ett projekt med typ \"website\"\r\n          return projectType === searchType || \r\n                 projectType + 's' === searchType || \r\n                 projectType === searchType + 's';\r\n        });\r\n        \r\n        console.log(`Hittade ${filteredProjects.length} projekt av typen \"${type}\"`);\r\n        setProjects(filteredProjects);\r\n        \r\n      } catch (err) {\r\n        console.error('Error fetching projects:', err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProjects();\r\n  }, [type]);\r\n\r\n  return { projects, loading, error };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}