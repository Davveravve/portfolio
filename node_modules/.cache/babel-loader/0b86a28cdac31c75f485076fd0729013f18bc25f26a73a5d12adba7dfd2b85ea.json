{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useProject.js\nimport { useState, useEffect } from 'react';\nexport const useProject = projectId => {\n  _s();\n  const [project, setProject] = useState(null);\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProject = async () => {\n      if (!projectId) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n\n        // Hämta projektdata från sessionStorage eller config\n        const storedProjects = sessionStorage.getItem('allProjects');\n        let allProjects = [];\n        if (storedProjects) {\n          allProjects = JSON.parse(storedProjects);\n        } else {\n          // Försök ladda från config om sessionStorage är tom\n          const response = await fetch('/projects.json');\n          if (response.ok) {\n            allProjects = await response.json();\n            sessionStorage.setItem('allProjects', JSON.stringify(allProjects));\n          }\n        }\n\n        // Hitta specifikt projekt\n        const foundProject = allProjects.find(p => p.id === projectId);\n        if (!foundProject) {\n          throw new Error(`Project \"${projectId}\" not found`);\n        }\n        setProject(foundProject);\n\n        // Använd bildlistan från config om den finns\n        if (foundProject.images && Array.isArray(foundProject.images)) {\n          setImages(foundProject.images);\n        } else {\n          // Fallback till bara main.jpg\n          setImages(['main.jpg']);\n        }\n      } catch (err) {\n        console.error('Error fetching project:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProject();\n  }, [projectId]);\n  return {\n    project,\n    images,\n    loading,\n    error\n  };\n};\n_s(useProject, \"lxGVgLJu5gkce6FwQX0m9zYCMjE=\");","map":{"version":3,"names":["useState","useEffect","useProject","projectId","_s","project","setProject","images","setImages","loading","setLoading","error","setError","fetchProject","storedProjects","sessionStorage","getItem","allProjects","JSON","parse","response","fetch","ok","json","setItem","stringify","foundProject","find","p","id","Error","Array","isArray","err","console","message"],"sources":["C:/Users/David/Desktop/portfolio/src/hooks/useProject.js"],"sourcesContent":["// src/hooks/useProject.js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useProject = (projectId) => {\r\n  const [project, setProject] = useState(null);\r\n  const [images, setImages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProject = async () => {\r\n      if (!projectId) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Hämta projektdata från sessionStorage eller config\r\n        const storedProjects = sessionStorage.getItem('allProjects');\r\n        let allProjects = [];\r\n        \r\n        if (storedProjects) {\r\n          allProjects = JSON.parse(storedProjects);\r\n        } else {\r\n          // Försök ladda från config om sessionStorage är tom\r\n          const response = await fetch('/projects.json');\r\n          if (response.ok) {\r\n            allProjects = await response.json();\r\n            sessionStorage.setItem('allProjects', JSON.stringify(allProjects));\r\n          }\r\n        }\r\n        \r\n        // Hitta specifikt projekt\r\n        const foundProject = allProjects.find(p => p.id === projectId);\r\n        \r\n        if (!foundProject) {\r\n          throw new Error(`Project \"${projectId}\" not found`);\r\n        }\r\n        \r\n        setProject(foundProject);\r\n        \r\n        // Använd bildlistan från config om den finns\r\n        if (foundProject.images && Array.isArray(foundProject.images)) {\r\n          setImages(foundProject.images);\r\n        } else {\r\n          // Fallback till bara main.jpg\r\n          setImages(['main.jpg']);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching project:', err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProject();\r\n  }, [projectId]);\r\n\r\n  return { project, images, loading, error };\r\n};"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,UAAU,GAAIC,SAAS,IAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAACV,SAAS,EAAE;QACdO,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;MAEA,IAAI;QACFA,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAMI,cAAc,GAAGC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;QAC5D,IAAIC,WAAW,GAAG,EAAE;QAEpB,IAAIH,cAAc,EAAE;UAClBG,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,cAAc,CAAC;QAC1C,CAAC,MAAM;UACL;UACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,CAAC;UAC9C,IAAID,QAAQ,CAACE,EAAE,EAAE;YACfL,WAAW,GAAG,MAAMG,QAAQ,CAACG,IAAI,CAAC,CAAC;YACnCR,cAAc,CAACS,OAAO,CAAC,aAAa,EAAEN,IAAI,CAACO,SAAS,CAACR,WAAW,CAAC,CAAC;UACpE;QACF;;QAEA;QACA,MAAMS,YAAY,GAAGT,WAAW,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAK1B,SAAS,CAAC;QAE9D,IAAI,CAACuB,YAAY,EAAE;UACjB,MAAM,IAAII,KAAK,CAAC,YAAY3B,SAAS,aAAa,CAAC;QACrD;QAEAG,UAAU,CAACoB,YAAY,CAAC;;QAExB;QACA,IAAIA,YAAY,CAACnB,MAAM,IAAIwB,KAAK,CAACC,OAAO,CAACN,YAAY,CAACnB,MAAM,CAAC,EAAE;UAC7DC,SAAS,CAACkB,YAAY,CAACnB,MAAM,CAAC;QAChC,CAAC,MAAM;UACL;UACAC,SAAS,CAAC,CAAC,UAAU,CAAC,CAAC;QACzB;MACF,CAAC,CAAC,OAAOyB,GAAG,EAAE;QACZC,OAAO,CAACvB,KAAK,CAAC,yBAAyB,EAAEsB,GAAG,CAAC;QAC7CrB,QAAQ,CAACqB,GAAG,CAACE,OAAO,CAAC;MACvB,CAAC,SAAS;QACRzB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACV,SAAS,CAAC,CAAC;EAEf,OAAO;IAAEE,OAAO;IAAEE,MAAM;IAAEE,OAAO;IAAEE;EAAM,CAAC;AAC5C,CAAC;AAACP,EAAA,CA3DWF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}