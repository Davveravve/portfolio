{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useProject.js\nimport { useState, useEffect } from 'react';\nexport const useProject = projectId => {\n  _s();\n  const [project, setProject] = useState(null);\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProject = async () => {\n      if (!projectId) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n\n        // Simulera API-anrop\n        await new Promise(resolve => setTimeout(resolve, 300));\n\n        // Hämta lagrade projekt från sessionStorage\n        const storedProjects = sessionStorage.getItem('allProjects');\n        let allProjects = [];\n        if (storedProjects) {\n          allProjects = JSON.parse(storedProjects);\n        } else {\n          // Backup om inga projekt hittades i sessionStorage\n          allProjects = [{\n            id: 'GameProject1',\n            info: {\n              type: 'Game',\n              description: 'A sample game project with detailed information about gameplay, mechanics, and development challenges.',\n              technologies: ['Unity', 'C#', 'Blender', '3D Modeling', 'Game Design'],\n              links: [{\n                title: 'GitHub Repository',\n                url: 'https://github.com'\n              }, {\n                title: 'Play Game',\n                url: 'https://example.com/play'\n              }]\n            }\n          }, {\n            id: 'WebsiteProject1',\n            info: {\n              type: 'Website',\n              description: 'A modern website project showcasing responsive design, animations, and backend integration.',\n              technologies: ['React', 'JavaScript', 'CSS', 'Firebase', 'Responsive Design'],\n              links: [{\n                title: 'GitHub Repository',\n                url: 'https://github.com'\n              }, {\n                title: 'Live Website',\n                url: 'https://example.com'\n              }]\n            }\n          }, {\n            id: 'Axento',\n            info: {\n              type: 'Axento',\n              description: 'Ett litet sidoprojekt jag hade för att underlätta hantering av material i min servicebil.',\n              technologies: ['Javascript', 'React', 'Supabase', 'Vercel'],\n              links: [{\n                title: 'GitHub Repository',\n                url: 'https://github.com/yourusername/projectname'\n              }, {\n                title: 'Live Demo',\n                url: 'https://www.axento.se'\n              }]\n            }\n          }];\n        }\n\n        // Hitta specifikt projekt\n        const foundProject = allProjects.find(p => p.id === projectId);\n        if (!foundProject) {\n          throw new Error(`Project \"${projectId}\" not found`);\n        }\n        setProject(foundProject);\n\n        // Simulera bildlista baserat på projektet\n        // I en verklig implementation skulle detta hämtas från filsystemet\n        if (projectId === 'GameProject1') {\n          // Notera att du kan använda både JPG och PNG för samma bild\n          // systemet kommer att försöka ladda alternativet om första formatet misslyckas\n          setImages(['main.jpg', 'screenshot1.jpg', 'screenshot2.jpg']);\n        } else if (projectId === 'WebsiteProject1') {\n          setImages(['main.jpg', 'mobile.jpg', 'desktop.jpg']);\n        } else if (projectId === 'Axento') {\n          // För projektet Axento, leta efter flera bilder\n          setImages(['main.jpg', 'image1.jpg', 'image2.jpg']);\n        } else {\n          // För alla andra projekt, leta åtminstone efter main.jpg\n          setImages(['main.jpg']);\n        }\n      } catch (err) {\n        console.error('Error fetching project:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProject();\n  }, [projectId]);\n  return {\n    project,\n    images,\n    loading,\n    error\n  };\n};\n_s(useProject, \"lxGVgLJu5gkce6FwQX0m9zYCMjE=\");","map":{"version":3,"names":["useState","useEffect","useProject","projectId","_s","project","setProject","images","setImages","loading","setLoading","error","setError","fetchProject","Promise","resolve","setTimeout","storedProjects","sessionStorage","getItem","allProjects","JSON","parse","id","info","type","description","technologies","links","title","url","foundProject","find","p","Error","err","console","message"],"sources":["C:/Users/David/Desktop/portfolio/src/hooks/useProject.js"],"sourcesContent":["// src/hooks/useProject.js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useProject = (projectId) => {\r\n  const [project, setProject] = useState(null);\r\n  const [images, setImages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProject = async () => {\r\n      if (!projectId) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Simulera API-anrop\r\n        await new Promise(resolve => setTimeout(resolve, 300));\r\n        \r\n        // Hämta lagrade projekt från sessionStorage\r\n        const storedProjects = sessionStorage.getItem('allProjects');\r\n        let allProjects = [];\r\n        \r\n        if (storedProjects) {\r\n          allProjects = JSON.parse(storedProjects);\r\n        } else {\r\n          // Backup om inga projekt hittades i sessionStorage\r\n          allProjects = [\r\n            {\r\n              id: 'GameProject1',\r\n              info: { \r\n                type: 'Game', \r\n                description: 'A sample game project with detailed information about gameplay, mechanics, and development challenges.',\r\n                technologies: ['Unity', 'C#', 'Blender', '3D Modeling', 'Game Design'],\r\n                links: [\r\n                  { title: 'GitHub Repository', url: 'https://github.com' },\r\n                  { title: 'Play Game', url: 'https://example.com/play' }\r\n                ]\r\n              }\r\n            },\r\n            {\r\n              id: 'WebsiteProject1',\r\n              info: { \r\n                type: 'Website', \r\n                description: 'A modern website project showcasing responsive design, animations, and backend integration.',\r\n                technologies: ['React', 'JavaScript', 'CSS', 'Firebase', 'Responsive Design'],\r\n                links: [\r\n                  { title: 'GitHub Repository', url: 'https://github.com' },\r\n                  { title: 'Live Website', url: 'https://example.com' }\r\n                ]\r\n              }\r\n            },\r\n            {\r\n              id: 'Axento',\r\n              info: { \r\n                type: 'Axento', \r\n                description: 'Ett litet sidoprojekt jag hade för att underlätta hantering av material i min servicebil.',\r\n                technologies: ['Javascript', 'React', 'Supabase', 'Vercel'],\r\n                links: [\r\n                  { title: 'GitHub Repository', url: 'https://github.com/yourusername/projectname' },\r\n                  { title: 'Live Demo', url: 'https://www.axento.se' }\r\n                ]\r\n              }\r\n            }\r\n          ];\r\n        }\r\n        \r\n        // Hitta specifikt projekt\r\n        const foundProject = allProjects.find(p => p.id === projectId);\r\n        \r\n        if (!foundProject) {\r\n          throw new Error(`Project \"${projectId}\" not found`);\r\n        }\r\n        \r\n        setProject(foundProject);\r\n        \r\n        // Simulera bildlista baserat på projektet\r\n        // I en verklig implementation skulle detta hämtas från filsystemet\r\n        if (projectId === 'GameProject1') {\r\n          // Notera att du kan använda både JPG och PNG för samma bild\r\n          // systemet kommer att försöka ladda alternativet om första formatet misslyckas\r\n          setImages(['main.jpg', 'screenshot1.jpg', 'screenshot2.jpg']);\r\n        } else if (projectId === 'WebsiteProject1') {\r\n          setImages(['main.jpg', 'mobile.jpg', 'desktop.jpg']);\r\n        } else if (projectId === 'Axento') {\r\n          // För projektet Axento, leta efter flera bilder\r\n          setImages(['main.jpg', 'image1.jpg', 'image2.jpg']);\r\n        } else {\r\n          // För alla andra projekt, leta åtminstone efter main.jpg\r\n          setImages(['main.jpg']);\r\n        }\r\n        \r\n      } catch (err) {\r\n        console.error('Error fetching project:', err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProject();\r\n  }, [projectId]);\r\n\r\n  return { project, images, loading, error };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}