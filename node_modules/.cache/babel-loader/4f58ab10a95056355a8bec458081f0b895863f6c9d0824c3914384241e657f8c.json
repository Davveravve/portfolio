{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useProjects.js\nimport { useState, useEffect } from 'react';\nexport const useProjects = type => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProjects = async () => {\n      if (!type) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n\n        // Since we're using the filesystem approach, we need to simulate\n        // fetching projects based on the project type\n        // In a real implementation, this would be an API endpoint\n\n        // For development purposes, we're simulating this data\n        // You'll need to implement a proper backend service or API to handle this\n        const mockProjectFetch = async () => {\n          // This simulates the delay of a network request\n          await new Promise(resolve => setTimeout(resolve, 500));\n\n          // Read the project folders from the public directory\n          // In a real implementation, this would come from an API\n          const projectsData = [];\n\n          // For testing, we'll create mock data\n          // Make this work with the sample folders we created\n          if (type.toLowerCase() === 'game' || type.toLowerCase() === 'games') {\n            projectsData.push({\n              id: 'GameProject1',\n              info: {\n                type: 'Game',\n                description: 'A sample game project',\n                technologies: ['Unity', 'C#', 'Blender'],\n                links: [{\n                  title: 'GitHub',\n                  url: 'https://github.com'\n                }, {\n                  title: 'Play Game',\n                  url: 'https://example.com'\n                }]\n              }\n            });\n          } else if (type.toLowerCase() === 'website' || type.toLowerCase() === 'websites') {\n            projectsData.push({\n              id: 'WebsiteProject1',\n              info: {\n                type: 'Website',\n                description: 'A sample website project',\n                technologies: ['React', 'CSS', 'Firebase'],\n                links: [{\n                  title: 'GitHub',\n                  url: 'https://github.com'\n                }, {\n                  title: 'Live Site',\n                  url: 'https://example.com'\n                }]\n              }\n            });\n          }\n          return projectsData;\n        };\n        const data = await mockProjectFetch();\n        setProjects(data);\n      } catch (err) {\n        console.error('Error fetching projects:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProjects();\n  }, [type]);\n  return {\n    projects,\n    loading,\n    error\n  };\n};\n_s(useProjects, \"D01YWZOqXtPgB8Jf7trLNzFYnAg=\");","map":{"version":3,"names":["useState","useEffect","useProjects","type","_s","projects","setProjects","loading","setLoading","error","setError","fetchProjects","mockProjectFetch","Promise","resolve","setTimeout","projectsData","toLowerCase","push","id","info","description","technologies","links","title","url","data","err","console","message"],"sources":["C:/Users/David/Desktop/portfolio/src/hooks/useProjects.js"],"sourcesContent":["// src/hooks/useProjects.js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useProjects = (type) => {\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProjects = async () => {\r\n      if (!type) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Since we're using the filesystem approach, we need to simulate\r\n        // fetching projects based on the project type\r\n        // In a real implementation, this would be an API endpoint\r\n        \r\n        // For development purposes, we're simulating this data\r\n        // You'll need to implement a proper backend service or API to handle this\r\n        const mockProjectFetch = async () => {\r\n          // This simulates the delay of a network request\r\n          await new Promise(resolve => setTimeout(resolve, 500));\r\n          \r\n          // Read the project folders from the public directory\r\n          // In a real implementation, this would come from an API\r\n          const projectsData = [];\r\n          \r\n          // For testing, we'll create mock data\r\n          // Make this work with the sample folders we created\r\n          if (type.toLowerCase() === 'game' || type.toLowerCase() === 'games') {\r\n            projectsData.push({\r\n              id: 'GameProject1',\r\n              info: {\r\n                type: 'Game',\r\n                description: 'A sample game project',\r\n                technologies: ['Unity', 'C#', 'Blender'],\r\n                links: [\r\n                  { title: 'GitHub', url: 'https://github.com' },\r\n                  { title: 'Play Game', url: 'https://example.com' }\r\n                ]\r\n              }\r\n            });\r\n          } else if (type.toLowerCase() === 'website' || type.toLowerCase() === 'websites') {\r\n            projectsData.push({\r\n              id: 'WebsiteProject1',\r\n              info: {\r\n                type: 'Website',\r\n                description: 'A sample website project',\r\n                technologies: ['React', 'CSS', 'Firebase'],\r\n                links: [\r\n                  { title: 'GitHub', url: 'https://github.com' },\r\n                  { title: 'Live Site', url: 'https://example.com' }\r\n                ]\r\n              }\r\n            });\r\n          }\r\n          \r\n          return projectsData;\r\n        };\r\n        \r\n        const data = await mockProjectFetch();\r\n        setProjects(data);\r\n        \r\n      } catch (err) {\r\n        console.error('Error fetching projects:', err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProjects();\r\n  }, [type]);\r\n\r\n  return { projects, loading, error };\r\n};"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI,CAACR,IAAI,EAAE;QACTK,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;MAEA,IAAI;QACFA,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA;QACA;;QAEA;QACA;QACA,MAAMI,gBAAgB,GAAG,MAAAA,CAAA,KAAY;UACnC;UACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;UAEtD;UACA;UACA,MAAME,YAAY,GAAG,EAAE;;UAEvB;UACA;UACA,IAAIb,IAAI,CAACc,WAAW,CAAC,CAAC,KAAK,MAAM,IAAId,IAAI,CAACc,WAAW,CAAC,CAAC,KAAK,OAAO,EAAE;YACnED,YAAY,CAACE,IAAI,CAAC;cAChBC,EAAE,EAAE,cAAc;cAClBC,IAAI,EAAE;gBACJjB,IAAI,EAAE,MAAM;gBACZkB,WAAW,EAAE,uBAAuB;gBACpCC,YAAY,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,CAAC;gBACxCC,KAAK,EAAE,CACL;kBAAEC,KAAK,EAAE,QAAQ;kBAAEC,GAAG,EAAE;gBAAqB,CAAC,EAC9C;kBAAED,KAAK,EAAE,WAAW;kBAAEC,GAAG,EAAE;gBAAsB,CAAC;cAEtD;YACF,CAAC,CAAC;UACJ,CAAC,MAAM,IAAItB,IAAI,CAACc,WAAW,CAAC,CAAC,KAAK,SAAS,IAAId,IAAI,CAACc,WAAW,CAAC,CAAC,KAAK,UAAU,EAAE;YAChFD,YAAY,CAACE,IAAI,CAAC;cAChBC,EAAE,EAAE,iBAAiB;cACrBC,IAAI,EAAE;gBACJjB,IAAI,EAAE,SAAS;gBACfkB,WAAW,EAAE,0BAA0B;gBACvCC,YAAY,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,UAAU,CAAC;gBAC1CC,KAAK,EAAE,CACL;kBAAEC,KAAK,EAAE,QAAQ;kBAAEC,GAAG,EAAE;gBAAqB,CAAC,EAC9C;kBAAED,KAAK,EAAE,WAAW;kBAAEC,GAAG,EAAE;gBAAsB,CAAC;cAEtD;YACF,CAAC,CAAC;UACJ;UAEA,OAAOT,YAAY;QACrB,CAAC;QAED,MAAMU,IAAI,GAAG,MAAMd,gBAAgB,CAAC,CAAC;QACrCN,WAAW,CAACoB,IAAI,CAAC;MAEnB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACnB,KAAK,CAAC,0BAA0B,EAAEkB,GAAG,CAAC;QAC9CjB,QAAQ,CAACiB,GAAG,CAACE,OAAO,CAAC;MACvB,CAAC,SAAS;QACRrB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;EAEV,OAAO;IAAEE,QAAQ;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACrC,CAAC;AAACL,EAAA,CA7EWF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}