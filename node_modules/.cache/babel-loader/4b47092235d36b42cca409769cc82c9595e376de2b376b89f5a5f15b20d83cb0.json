{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useProjectTypes.js\nimport { useState, useEffect } from 'react';\nexport const useProjectTypes = () => {\n  _s();\n  const [projectTypes, setProjectTypes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProjectTypes = async () => {\n      try {\n        setLoading(true);\n\n        // In a production app, this would be an API call\n        // For now, we'll read the file system directly in the frontend\n        const response = await fetch('/api/project-types');\n        if (!response.ok) {\n          throw new Error('Failed to fetch project types');\n        }\n        const data = await response.json();\n        setProjectTypes(data);\n      } catch (err) {\n        console.error('Error fetching project types:', err);\n        setError(err.message);\n\n        // Fallback to hardcoded types for development\n        setProjectTypes(['Games', 'Architecture', 'Websites', 'Svenska']);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProjectTypes();\n  }, []);\n  return {\n    projectTypes,\n    loading,\n    error\n  };\n};\n_s(useProjectTypes, \"y2UGV4XtQKcUnbMaM8MZNNm+JFI=\");","map":{"version":3,"names":["useState","useEffect","useProjectTypes","_s","projectTypes","setProjectTypes","loading","setLoading","error","setError","fetchProjectTypes","response","fetch","ok","Error","data","json","err","console","message"],"sources":["C:/Users/David/Desktop/portfolio/src/hooks/useProjectTypes.js"],"sourcesContent":["// src/hooks/useProjectTypes.js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useProjectTypes = () => {\r\n  const [projectTypes, setProjectTypes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProjectTypes = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // In a production app, this would be an API call\r\n        // For now, we'll read the file system directly in the frontend\r\n        const response = await fetch('/api/project-types');\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch project types');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        setProjectTypes(data);\r\n      } catch (err) {\r\n        console.error('Error fetching project types:', err);\r\n        setError(err.message);\r\n        \r\n        // Fallback to hardcoded types for development\r\n        setProjectTypes(['Games', 'Architecture', 'Websites', 'Svenska']);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProjectTypes();\r\n  }, []);\r\n\r\n  return { projectTypes, loading, error };\r\n};"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMS,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA;QACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,CAAC;QAElD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;QAClD;QAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCX,eAAe,CAACU,IAAI,CAAC;MACvB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZC,OAAO,CAACV,KAAK,CAAC,+BAA+B,EAAES,GAAG,CAAC;QACnDR,QAAQ,CAACQ,GAAG,CAACE,OAAO,CAAC;;QAErB;QACAd,eAAe,CAAC,CAAC,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;MACnE,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEN,YAAY;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACzC,CAAC;AAACL,EAAA,CAnCWD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}